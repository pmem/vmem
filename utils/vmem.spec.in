
# rpmbuild options:
#   --define _testconfig <path to custom testconfig.sh>
#   --define _skip_check 1

# do not terminate build if files in the $RPM_BUILD_ROOT
# directory are not found in the %files
%define _unpackaged_files_terminate_build 0

# disable 'make check' on suse
%if %{defined suse_version}
	%define _skip_check 1
	%define dist .suse%{suse_version}
%endif

Name:		vmem
Version:	__VERSION__
Release:	1%{?dist}
Summary:	__PACKAGE_SUMMARY__
Packager:	__PACKAGE_MAINTAINER__
Group:		__GROUP_SYS_LIBS__
License:	__LICENSE__
URL:		http://pmem.io/vmem

Source0:	%{name}-%{version}.tar.gz

BuildRequires:	gcc
BuildRequires:	make
BuildRequires:	glibc-devel
BuildRequires:	autoconf
BuildRequires:	automake
BuildRequires:	man
BuildRequires:	pkgconfig
BuildRequires:	gdb


# Debug variants of the libraries should be filtered out of the provides.
%global __provides_exclude_from ^%{_libdir}/vmem_debug/.*\\.so.*$

# By design, vmem does not support any 32-bit architecture.  It has not
# been validated on any architecture other than x86_64.

ExclusiveArch: x86_64

%description
The Persistent Memory Development Kit is a collection of libraries for
using memory-mapped persistence, optimized specifically for persistent memory.


%package -n libvmem__PKG_NAME_SUFFIX__
Summary: Volatile Memory allocation library
Group: __GROUP_SYS_LIBS__
%description -n libvmem__PKG_NAME_SUFFIX__
The libvmem library turns a pool of persistent memory into a volatile
memory pool, similar to the system heap but kept separate and with
its own malloc-style API.

%files -n libvmem__PKG_NAME_SUFFIX__
%defattr(-,root,root,-)
%{_libdir}/libvmem.so.*
%license LICENSE
%doc ChangeLog README.md


%package -n libvmem-devel
Summary: Development files for the Volatile Memory allocation library
Group: __GROUP_DEV_LIBS__
Requires: libvmem__PKG_NAME_SUFFIX__ = %{version}-%{release}
%description -n libvmem-devel
The libvmem library turns a pool of persistent memory into a volatile
memory pool, similar to the system heap but kept separate and with
its own malloc-style API.

This sub-package contains libraries and header files for developing
applications that want to make use of libvmem.

%files -n libvmem-devel
%defattr(-,root,root,-)
%{_libdir}/libvmem.so
%{_libdir}/pkgconfig/libvmem.pc
%{_includedir}/libvmem.h
%{_mandir}/man7/libvmem.7.gz
%{_mandir}/man3/vmem_*.3.gz
%license LICENSE
%doc ChangeLog README.md


%package -n libvmem-debug
Summary: Debug variant of the Volatile Memory allocation library
Group: __GROUP_DEV_LIBS__
Requires: libvmem__PKG_NAME_SUFFIX__ = %{version}-%{release}
%description -n libvmem-debug
The libvmem library turns a pool of persistent memory into a volatile
memory pool, similar to the system heap but kept separate and with
its own malloc-style API.

This sub-package contains debug variant of the library, providing
run-time assertions and trace points. The typical way to access the
debug version is to set the environment variable LD_LIBRARY_PATH to
/usr/lib64/vmem_debug.

%files -n libvmem-debug
%defattr(-,root,root,-)
%dir %{_libdir}/vmem_debug
%{_libdir}/vmem_debug/libvmem.so
%{_libdir}/vmem_debug/libvmem.so.*
%license LICENSE
%doc ChangeLog README.md


%package -n libvmmalloc__PKG_NAME_SUFFIX__
Summary: Dynamic to Persistent Memory allocation translation library
Group: __GROUP_SYS_LIBS__
%description -n libvmmalloc__PKG_NAME_SUFFIX__
The libvmmalloc library transparently converts all the dynamic memory
allocations into persistent memory allocations. This allows the use
of persistent memory as volatile memory without modifying the target
application.

The typical usage of libvmmalloc is to load it via the LD_PRELOAD
environment variable.

%files -n libvmmalloc__PKG_NAME_SUFFIX__
%defattr(-,root,root,-)
%{_libdir}/libvmmalloc.so.*
%license LICENSE
%doc ChangeLog README.md


%package -n libvmmalloc-devel
Summary: Development files for the Dynamic-to-Persistent allocation library
Group: __GROUP_DEV_LIBS__
Requires: libvmmalloc__PKG_NAME_SUFFIX__ = %{version}-%{release}
%description -n libvmmalloc-devel
The libvmmalloc library transparently converts all the dynamic memory
allocations into persistent memory allocations. This allows the use
of persistent memory as volatile memory without modifying the target
application.

This sub-package contains libraries and header files for developing
applications that want to specifically make use of libvmmalloc.

%files -n libvmmalloc-devel
%defattr(-,root,root,-)
%{_libdir}/libvmmalloc.so
%{_libdir}/pkgconfig/libvmmalloc.pc
%{_includedir}/libvmmalloc.h
%{_mandir}/man7/libvmmalloc.7.gz
%license LICENSE
%doc ChangeLog README.md


%package -n libvmmalloc-debug
Summary: Debug variant of the Dynamic-to-Persistent allocation library
Group: __GROUP_DEV_LIBS__
Requires: libvmmalloc__PKG_NAME_SUFFIX__ = %{version}-%{release}
%description -n libvmmalloc-debug
The libvmmalloc library transparently converts all the dynamic memory
allocations into persistent memory allocations. This allows the use
of persistent memory as volatile memory without modifying the target
application.

This sub-package contains debug variant of the library, providing
run-time assertions and trace points. The typical way to access the
debug version is to set the environment variable LD_LIBRARY_PATH to
/usr/lib64/vmem_debug.

%files -n libvmmalloc-debug
%defattr(-,root,root,-)
%dir %{_libdir}/vmem_debug
%{_libdir}/vmem_debug/libvmmalloc.so
%{_libdir}/vmem_debug/libvmmalloc.so.*
%license LICENSE
%doc ChangeLog README.md


%prep
%setup -q -n %{name}-%{version}


%build
# For debug build default flags may be overriden to disable compiler
# optimizations.
CFLAGS="%{optflags}" \
LDFLAGS="%{?__global_ldflags}" \
make %{?_smp_mflags} __MAKE_FLAGS__


# Override LIB_AR with empty string to skip installation of static libraries
%install
make install DESTDIR=%{buildroot} \
	LIB_AR= \
	prefix=%{_prefix} \
	libdir=%{_libdir} \
	includedir=%{_includedir} \
	mandir=%{_mandir} \
	bindir=%{_bindir} \
	sysconfdir=%{_sysconfdir} \
	docdir=%{_docdir}
__MAKE_INSTALL_FDUPES__


%check
%if 0%{?_skip_check} == 1
	echo "Check skipped"
%else
	%if %{defined _testconfig}
		cp %{_testconfig} src/test/testconfig.sh
	%else
		echo "PMEM_FS_DIR=/tmp" > src/test/testconfig.sh
		echo "PMEM_FS_DIR_FORCE_PMEM=1" >> src/test/testconfig.sh
		echo 'TEST_BUILD="debug nondebug"' >> src/test/testconfig.sh
		echo 'TEST_FS="pmem any none"' >> src/test/testconfig.sh
	%endif
	make check
%endif

%post   -n libvmem__PKG_NAME_SUFFIX__ -p /sbin/ldconfig
%postun -n libvmem__PKG_NAME_SUFFIX__ -p /sbin/ldconfig
%post   -n libvmmalloc__PKG_NAME_SUFFIX__ -p /sbin/ldconfig
%postun -n libvmmalloc__PKG_NAME_SUFFIX__ -p /sbin/ldconfig

%if 0%{?__debug_package} == 0
%debug_package
%endif


%changelog
